$schema: "http://json-schema.org/draft-07/schema#"
$author: "Francis Charette-Migneault <francis.charette-migneault@crim.ca>"
$id: "https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/schemas/processes-dru/cwl.yaml"

$definitions:
  DeployCWL:
    oneOf:
      - $ref: "#/$definitions/CWL"
      - $ref: "#/$definitions/DeployOGCAppPackageCWL"
  DeployOGCAppPackageCWL:
    type: object
    title: DeployOGCAppPackage
    description: Deployment using standard OGC Application Package definition.
    properties:
      processDescription:
        $ref: "https://raw.githubusercontent.com/opengeospatial/ogcapi-processes/master/openapi/schemas/processes-core/process.yaml"
      immediateDeployment:
        type: boolean
        title: immediateDeployment
        default: true
      deploymentProfileName:
        type: string
        format: uri
        enum:
        # if the CWL has a DockerRequirement and is a 'class: CommandLineTool'
        - "http://www.opengis.net/profiles/eoc/dockerizedApplication"
        # when the CWL is a 'class: Workflow'
        - "http://www.opengis.net/profiles/eoc/workflow"
      executionUnit:
        oneOf:
          - $ref: "#/$definitions/CWLExecutionUnit"
          - type: array
            items: "#/$definitions/CWLExecutionUnit"
    required:
      - executionUnit
      - processDescription
    additionalProperties: false
  CWLExecutionUnit:
    description: CWL definition use to deploy a process.
    type: object
    properties:
      unit:
        $ref: '#/$definitions/CWL'
  CWL:
    oneOf:
      - $ref: '#/$definitions/CWLAtomic'
      - $ref: '#/$definitions/CWLGraph'
      - $ref: '#/$definitions/CWLWorkflow'
  CWLKeywordList:
    type: array
    title: KeywordList
    description: Keywords applied to the process for search and categorization purposes.
    default: []
    items:
      type: string
      title: keyword
      minLength: 1
  CWLIdentifier:
    anyOf:
    - type: string
      title: UUID
      description: Unique identifier.
      format: uuid
      pattern: '^[a-f0-9]{8}(?:-?[a-f0-9]{4}){3}-?[a-f0-9]{12}$'
    - type: string
      title: ID
      description: Generic identifier.
      pattern: '^[#.]?[A-Za-z0-9]+(?:[-_.][A-Za-z0-9]+)*$'
    title: CWLIdentifier
    description: Reference to the process identifier.
  CWLIntent:
    type: array
    title: CWLIntent
    items:
      type: string
      title: item
      description: |
        Identifier URL to a concept for the type of computational operation accomplished by this process
        (see example operations: http://edamontology.org/operation_0004).
      format: url
      pattern: '^((?:http|ftp)s?://)?(?!.*//.*$)(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|localhost|\[[a-f0-9:]+\]|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::\d+)?(?:/?|[/?]\S+)$'
  CWLRequirements:
    oneOf:
    - $ref: '#/$definitions/CWLRequirementsMap'
    - $ref: '#/$definitions/CWLRequirementsList'
    title: CWLRequirements
    description: Explicit requirement to execute the application package.
  CWLRequirementsMap:
    title: CWLRequirementsMap
    type: object
    properties:
      cwltool:CUDARequirement:
        $ref: '#/$definitions/cwltool:CUDARequirement'
      DockerRequirement:
        $ref: '#/$definitions/DockerRequirement'
      InitialWorkDirRequirement:
        $ref: '#/$definitions/InitialWorkDirRequirement'
      InlineJavascriptRequirement:
        $ref: '#/$definitions/InlineJavascriptRequirement'
      InplaceUpdateRequirement:
        $ref: '#/$definitions/InplaceUpdateRequirement'
      LoadListingRequirement:
        $ref: '#/$definitions/LoadListingRequirement'
      NetworkAccessRequirement:
        $ref: '#/$definitions/NetworkAccessRequirement'
      ResourceRequirement:
        $ref: '#/$definitions/ResourceRequirement'
      ScatterFeatureRequirement:
        $ref: '#/$definitions/ScatterFeatureRequirement'
      ToolTimeLimitRequirement:
        $ref: '#/$definitions/ToolTimeLimitRequirement'
      WorkReuseRequirement:
        $ref: '#/$definitions/WorkReuseRequirement'
    additionalProperties:
      $ref: '#/$definitions/UnknownRequirement'
  DockerRequirement:
    type: object
    title: DockerRequirement
    properties:
      class:
        type: string
        enum:
          - DockerRequirement
      dockerPull:
        type: string
        title: Docker pull reference
        description: Reference package that will be retrieved and executed by CWL.
        example: docker-registry.host.com/namespace/image:1.2.3
      dockerImport:
        type: string
      dockerLoad:
        type: string
      dockerFile:
        type: string
      dockerImageId:
        type: string
      dockerOutputDirectory:
        type: string
    oneOf:
      - required: [dockerPull]
      - required: [dockerImport]
      - required: [dockerLoad]
      - required: [dockerFile]
    additionalProperties: false
  InitialWorkDirListing:
    type: array
    title: InitialWorkDirListing
    items:
      $ref: '#/$definitions/DirectoryListingItem'
  DirectoryListingItem:
    type: object
    title: DirectoryListingItem
    properties:
      entry:
        $ref: '#/$definitions/CWLExpression'
      entryname:
        type: string
        title: entryname
      writable:
        type: boolean
        title: writable
    additionalProperties: false
  InitialWorkDirRequirement:
    type: object
    title: InitialWorkDirRequirement
    properties:
      class:
        type: string
        enum:
          - InitialWorkDirRequirement
      listing:
        $ref: '#/$definitions/InitialWorkDirListing'
    required:
    - listing
    additionalProperties: false
  InlineJavascriptLibObject:
    type: object
    properties:
      '$include':
        type: string
    required:
      - '$include'
    additionalProperties: false
  InlineJavascriptLibItem:
    oneOf:
      - type: string
      - $ref: '#/$definitions/InlineJavascriptLibObject'
  InlineJavascriptLibraries:
    type: array
    title: InlineJavascriptLibraries
    description: |
      Additional code fragments that will also be inserted before executing the expression code.
      Allows for function definitions that may be called from CWL expressions.
    items:
      title: exp_lib
      $ref: '#/$definitions/InlineJavascriptLibItem'
  InlineJavascriptRequirement:
    type: object
    title: InlineJavascriptRequirement
    description: |
      Indicates that the workflow platform must support inline Javascript expressions.

      If this requirement is not present, the workflow platform must not perform expression interpolation
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#InlineJavascriptRequirement).
    properties:
      class:
        type: string
        enum:
          - InlineJavascriptRequirement
      expressionLib:
        $ref: '#/$definitions/InlineJavascriptLibraries'
      required:
        - expressionLib
    additionalProperties: false
  InplaceUpdateRequirement:
    type: object
    title: InplaceUpdateRequirement
    description: |
      If 'inplaceUpdate' is true, then an implementation supporting this feature may permit tools to directly
      update files with 'writable: true' in 'InitialWorkDirRequirement'. That is, as an optimization,
      files may be destructively modified in place as opposed to copied and updated
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#InplaceUpdateRequirement).
    properties:
      class:
        type: string
        enum:
          - InplaceUpdateRequirement
      inplaceUpdate:
        type: boolean
        title: inplaceUpdate
    required:
    - inplaceUpdate
    additionalProperties: false
  LoadListingRequirement:
    type: object
    title: LoadListingRequirement
    description: |
      Specify the desired behavior for loading the listing field of a 'Directory' object for use by expressions
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#LoadListingRequirement).
    properties:
      class:
        type: string
        enum:
        - LoadListingRequirement
      loadListing:
        type: string
        title: LoadListingEnum
        enum:
        - no_listing
        - shallow_listing
        - deep_listing
    required:
    - loadListing
    additionalProperties: false
  NetworkAccess:
    type: object
    title: NetworkAccess
    properties:
      networkAccess:
        type: boolean
        title: Network Access
        description: Indicate whether a process requires outgoing IPv4/IPv6 network
          access.
        example: true
    required:
    - networkAccess
    additionalProperties: false
  NetworkAccessRequirement:
    type: object
    title: NetworkAccessRequirement
    properties:
      class:
        type: string
        enum:
          - NetworkAccessRequirement
      NetworkAccess:
        $ref: '#/$definitions/NetworkAccess'
    required:
    - NetworkAccess
    additionalProperties: false
  CWLExpression:
    type: string
    title: CWLExpression
    description: |
      When combined with 'InlineJavascriptRequirement', this field allows runtime parameter references
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#Expression).
  ResourceCoresMinimum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceCoresMinimum
    summary: Minimum reserved number of CPU cores.
    description: |
      Minimum reserved number of CPU cores.
      
      May be a fractional value to indicate to a scheduling algorithm that one core can be allocated to
      multiple jobs. For example, a value of 0.25 indicates that up to 4 jobs
      may run in parallel on 1 core. A value of 1.25 means that up to 3 jobs
      can run on a 4 core system (4/1.25 ~ 3).
      
      Processes can only share a core allocation if the sum of each of their 'ramMax', 'tmpdirMax', and
      'outdirMax' requests also do not exceed the capacity of the node.
      
      Processes sharing a core must have the same level of isolation (typically a container
      or VM) that they would normally have.
      
      The reported number of CPU cores reserved for the process, which is available to expressions 
      on the 'CommandLineTool' as 'runtime.cores', must be a non-zero integer, and may be calculated by
      rounding up the cores request to the next whole number.
      
      Scheduling systems may allocate fractional CPU resources by setting quotas or scheduling weights.
      Scheduling systems that do not support fractional CPUs may round up the request to the next whole number.
    default: 1
  ResourceCoresMaximum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceCoresMaximum
    summary: Maximum reserved number of CPU cores.
    description: |
      Maximum reserved number of CPU cores.
      See 'coresMin' for discussion about fractional CPU requests.
  ResourceRAMMinimum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceRAMMinimum
    summary: Minimum reserved RAM in mebibytes.
    description: |
      Minimum reserved RAM in mebibytes (2**20).

      May be a fractional value. If so, the actual RAM request must be rounded up
      to the next whole number.

      The reported amount of RAM reserved for the process, which is available to
      expressions on the 'CommandLineTool' as 'runtime.ram', must be a non-zero integer.
    default: 256
  ResourceRAMMaximum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceRAMMaximum
    summary: Maximum reserved RAM in mebibytes.
    description: |
      Maximum reserved RAM in mebibytes (2**20).
      See 'ramMin' for discussion about fractional RAM requests.
  ResourceTmpDirMinimum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceTmpDirMinimum
    summary: Minimum reserved filesystem based storage for the designated temporary
      directory in mebibytes.
    description: | 
      Minimum reserved filesystem based storage for the designated temporary
      directory in mebibytes (2**20).

      May be a fractional value. If so, the actual storage request must be rounded
      up to the next whole number.

      The reported amount of storage reserved for the process, which is available
      to expressions on the 'CommandLineTool' as 'runtime.tmpdirSize', must be a non-zero integer.
    default: 1024
  ResourceTmpDirMaximum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceTmpDirMaximum
    summary: Maximum reserved filesystem based storage for the designated temporary directory in mebibytes.
    description: |
      Maximum reserved filesystem based storage for the designated temporary directory in mebibytes (2**20).
      See 'tmpdirMin' for discussion about fractional storage requests.
  ResourceOutDirMinimum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceOutDirMinimum
    summary: Minimum reserved filesystem based storage for the designated output
      directory in mebibytes.
    description: |
      Minimum reserved filesystem based storage for the designated output
      directory in mebibytes (2**20).

      May be a fractional value. If so, the actual storage request must be rounded
      up to the next whole number.

      The reported amount of storage reserved for the process, which is available
      to expressions on the 'CommandLineTool' as 'runtime.outdirSize', must be a non-zero integer.
    default: 1024
  ResourceOutDirMaximum:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 1
    - $ref: '#/$definitions/CWLExpression'
    title: ResourceOutDirMaximum
    summary: Maximum reserved filesystem based storage for the designated output
      directory in mebibytes.
    description: |
      Maximum reserved filesystem based storage for the designated output
      directory in mebibytes (2**20).
      See 'outdirMin' for discussion about fractional storage requests.
    default: 1
  ResourceRequirement:
    type: object
    title: ResourceRequirement
    description: |
      Specify basic hardware resource requirements
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#ResourceRequirement).
    properties:
      class:
        type: string
        enum:
          - ResourceRequirement
      coresMin:
        $ref: '#/$definitions/ResourceCoresMinimum'
      coresMax:
        $ref: '#/$definitions/ResourceCoresMaximum'
      ramMin:
        $ref: '#/$definitions/ResourceRAMMinimum'
      ramMax:
        $ref: '#/$definitions/ResourceRAMMaximum'
      tmpdirMin:
        $ref: '#/$definitions/ResourceTmpDirMinimum'
      tmpdirMax:
        $ref: '#/$definitions/ResourceTmpDirMaximum'
      outdirMin:
        $ref: '#/$definitions/ResourceOutDirMinimum'
      outdirMax:
        $ref: '#/$definitions/ResourceOutDirMaximum'
    additionalProperties: false
  Scatter:
    oneOf:
    - type: string
      title: ''
      description: Slug name pattern.
      pattern: ^[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*$
    - $ref: '#/$definitions/IdentifierArray'
    title: Scatter
    description: |
      The scatter field specifies one or more input parameters which will be scattered.

      An input parameter may be listed more than once. The declared type of each
      input parameter implicitly becomes an array of items of the input parameter type.
      If a parameter is listed more than once, it becomes a nested array. As a result,
      upstream parameters which are connected to scattered parameters must be arrays.

      All output parameter types are also implicitly wrapped in arrays. Each job
      in the scatter results in an entry in the output array.

      If any scattered parameter runtime value is an empty array, all outputs are
      set to empty arrays and no work is done for the step, according to applicable scattering rules.
  IdentifierArray:
    type: array
    title: IdentifierArray
    items:
      type: string
      title: item
      description: Slug name pattern.
      pattern: ^[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*$
    minItems: 1
  ScatterFeatureRequirement:
    type: object
    title: ScatterFeatureRequirement
    description: |
      A 'scatter' operation specifies that the associated Workflow step should execute separately over a list of
      input elements. Each job making up a scatter operation is independent and may be executed concurrently
      (see also: https://www.commonwl.org/v1.2/Workflow.html#WorkflowStep).
    $comment: Fields 'scatter' and 'scatterMethod' at the root of a 'WorkflowStep', not within the requirement.
    properties:
      class:
        type: string
        description: CWL requirement class specification.
        enum:
          - ScatterFeatureRequirement
    additionalProperties: false
  TimeLimitValue:
    oneOf:
    - type: number
      title: ''
      minimum: 0.0
    - type: integer
      title: ''
      minimum: 0
    - $ref: '#/$definitions/CWLExpression'
    title: TimeLimitValue
    description: |
      The time limit, in seconds.

      A time limit of zero means no time limit.
      Negative time limits are an error.
  ToolTimeLimitRequirement:
    type: object
    title: ToolTimeLimitRequirement
    description: |
      Set an upper limit on the execution time of a CommandLineTool.

      A CommandLineTool whose execution duration exceeds the time limit may be preemptively
      terminated and considered failed. May also be used by batch systems to make scheduling decisions.

      The execution duration excludes external operations, such as staging of files,
      pulling a docker image etc., and only counts wall-time for the execution of the command line itself.
    properties:
      class:
        type: string
        $comment: not 'ToolTimeLimitRequirement'
        enum:
          - ToolTimeLimit
      timelimit:
        $ref: '#/$definitions/TimeLimitValue'
    required:
    - timelimit
    additionalProperties: false
  EnableReuseValue:
    oneOf:
    - type: boolean
      title: ''
    - $ref: '#/$definitions/CWLExpression'
    title: EnableReuseValue
    description: |
      Indicates if reuse is enabled for this tool.

      Can be an expression when combined with 'InlineJavascriptRequirement'
      (see also: https://www.commonwl.org/v1.2/CommandLineTool.html#Expression).
  WorkReuseRequirement:
    type: object
    title: WorkReuseRequirement
    description: |
      For implementations that support reusing output from past work
      (on the assumption that same code and same input produce same results),
      control whether to enable or disable the reuse behavior for a particular tool
      or step (to accommodate situations where that assumption is incorrect).

      A reused step is not executed but instead returns the same output as the original execution.

      If 'WorkReuse' is not specified, correct tools should assume it is enabled by default.
    properties:
      class:
        type: string
        enum:
          - WorkReuseRequirement
      enableReuse:
        $ref: '#/$definitions/EnableReuseValue'
    required:
    - enableReuse
    additionalProperties: false
  UnknownRequirement:
    type: object
    description: Generic schema to allow alternative CWL requirements/hints not explicitly defined in schemas.
    properties:
      class:
        type: string
        title: Requirement Class Identifier
        description: CWL requirement class specification.
        example: UnknownRequirement
        not:
          enum:
            - cwltool:CUDARequirement
            - DockerRequirement
            - InitialWorkDirRequirement
            - InlineJavascriptRequirement
            - InplaceUpdateRequirement
            - LoadListingRequirement
            - NetworkAccessRequirement
            - ResourceRequirement
            - ScatterFeatureRequirement
            - ToolTimeLimitRequirement
            - WorkReuseRequirement
    additionalProperties: {}
  CWLRequirementsList:
    type: array
    title: CWLRequirementsList
    items:
      allOf:
        - $comment: |
            When using the list representation, 'class' is required to indicate which one is being represented.
            When using the mapping representation, 'class' is optional since it's the key, but it must match by name.
          type: object
          required:
            - class
        - $ref: '#/$definitions/CWLRequirementsItem'
  CWLRequirementsItem:
    title: CWLRequirementsItem
    $comment: |
      For any new items added, ensure they are added under 'class' of 'UnknownRequirement' as well.
      Otherwise, insufficiently restrictive classes could cause multiple matches, failing the 'oneOf' condition.
    oneOf:
      - $ref: '#/$definitions/cwltool:CUDARequirement'
      - $ref: '#/$definitions/DockerRequirement'
      - $ref: '#/$definitions/InitialWorkDirRequirement'
      - $ref: '#/$definitions/InlineJavascriptRequirement'
      - $ref: '#/$definitions/InplaceUpdateRequirement'
      - $ref: '#/$definitions/LoadListingRequirement'
      - $ref: '#/$definitions/NetworkAccessRequirement'
      - $ref: '#/$definitions/ResourceRequirement'
      - $ref: '#/$definitions/ScatterFeatureRequirement'
      - $ref: '#/$definitions/ToolTimeLimitRequirement'
      - $ref: '#/$definitions/WorkReuseRequirement'
      - $ref: '#/$definitions/UnknownRequirement'
  ScatterMethod:
    type: string
    title: scatterMethod
    description: |
      If 'scatter' declares more than one input parameter, 'scatterMethod'
      describes how to decompose the input into a discrete set of jobs.
      
      - dotproduct: specifies that each of the input arrays are aligned and
        one element taken from each array to construct each job. It is an
        error if all input arrays are not the same length.
      
      - nested_crossproduct: specifies the Cartesian product of the inputs, producing 
        a job for every combination of the scattered inputs. The output must be nested 
        arrays for each level of scattering, in the order that the input arrays
        are listed in the 'scatter' field.
      
      - flat_crossproduct: specifies the Cartesian product of the inputs, producing a 
        job for every combination of the scattered inputs. The output arrays must be 
        flattened to a single level, but otherwise listed in the order that the input 
        arrays are listed in the 'scatter' field.
    default: dotproduct
    enum:
    - dotproduct
    - nested_crossproduct
    - flat_crossproduct
    required:
    - timelimit
    - class
    additionalProperties: false
  CWLHints:
    oneOf:
    - $ref: '#/$definitions/CWLHintsMap'
    - $ref: '#/$definitions/CWLHintsList'
    title: CWLHints
    description: Non-failing additional hints that can help resolve extra requirements.
  CWLHintsMap:
    title: CWLHintsMap
    type: object
    properties:
      cwltool:CUDARequirement:
        $ref: '#/$definitions/cwltool:CUDARequirement'
      DockerRequirement:
        $ref: '#/$definitions/DockerRequirement'
      InitialWorkDirRequirement:
        $ref: '#/$definitions/InitialWorkDirRequirement'
      InlineJavascriptRequirement:
        $ref: '#/$definitions/InlineJavascriptRequirement'
      InplaceUpdateRequirement:
        $ref: '#/$definitions/InplaceUpdateRequirement'
      LoadListingRequirement:
        $ref: '#/$definitions/LoadListingRequirement'
      NetworkAccessRequirement:
        $ref: '#/$definitions/NetworkAccessRequirement'
      ResourceRequirement:
        $ref: '#/$definitions/ResourceRequirement'
      ScatterFeatureRequirement:
        $ref: '#/$definitions/ScatterFeatureRequirement'
      ToolTimeLimit:
        $comment: not 'ToolTimeLimitRequirement'
        $ref: '#/$definitions/ToolTimeLimitRequirement'
      WorkReuseRequirement:
        $ref: '#/$definitions/WorkReuseRequirement'
      BuiltinRequirement:
        $ref: '#/$definitions/BuiltinRequirement'
      OGCAPIRequirement:
        $ref: '#/$definitions/OGCAPIRequirement'
      WPS1Requirement:
        $ref: '#/$definitions/WPS1Requirement'
    additionalProperties:
      $ref: '#/$definitions/UnknownRequirement'
  BuiltinRequirement:
    type: object
    title: BuiltinRequirement
    description: |
      Hint indicating that the Application Package corresponds to a
      builtin process of this instance. (note: can only be an 'hint'
      as it is unofficial CWL specification).
    properties:
      class:
        type: string
        enum:
        - BuiltinRequirement
      process:
        type: string
        title: process
        description: Builtin process identifier.
        pattern: ^[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*$
    required:
    - process
    - class
    additionalProperties: false
  CUDAComputeCapability:
    oneOf:
    - type: string
      title: CUDA compute capability
      description: The compute capability supported by the GPU hardware.
      pattern: '^\d+\.\d+$'
    - $ref: '#/$definitions/CUDAComputeCapabilityArray'
    title: CUDA compute capability
    description: |
      The compute capability supported by the GPU hardware.
      
      * If this is a single value, it defines only the minimum compute capability.
        GPUs with higher capability are also accepted.
      * If it is an array value, then only select GPUs with compute capabilities that explicitly
        appear in the array.
        See https://docs.nvidia.com/deploy/cuda-compatibility/#faq and
        https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#cuda-compute-capability
        for details.
  CUDAComputeCapabilityArray:
    type: array
    title: CUDAComputeCapabilityArray
    items:
      type: string
      title: CUDA compute capability
      description: The compute capability supported by the GPU hardware.
      pattern: '^\d+\.\d+$'
    minItems: 1
  cwltool:CUDARequirement:
    type: object
    title: cwltool:CUDARequirement
    properties:
      class:
        type: string
        enum:
          - cwltool:CUDARequirement
      cudaVersionMin:
        type: string
        title: CUDA version minimum
        description: | 
          The minimum CUDA version required to run the software. This corresponds to a CUDA SDK release.

          When run in a container, the container image should provide the CUDA runtime,
          and the host driver is injected into the container.  In this case, because CUDA drivers
          are backwards compatible, it is possible to use an older SDK with a newer driver across major versions.

          See https://docs.nvidia.com/deploy/cuda-compatibility/ for details.
        example: '11.4'
        pattern: '^\d+\.\d+$'
      cudaComputeCapability:
        $ref: '#/$definitions/CUDAComputeCapability'
      cudaDeviceCountMin:
        type: integer
        title: CUDA device count minimum
        description: The minimum amount of devices required.
        default: 1
        example: 1
        minimum: 1
      cudaDeviceCountMax:
        type: integer
        title: CUDA device count maximum
        description: The maximum amount of devices required.
        default: 1
        example: 8
        minimum: 1
    required:
    - cudaVersionMin
    - cudaComputeCapability
    additionalProperties: false
  OGCAPIRequirement:
    type: object
    title: OGCAPIRequirement
    description: | 
      Hint indicating that the Application Package corresponds to an
      OGC API - Processes provider that should be remotely executed and monitored
      by this instance. (note: can only be an 'hint' as it is unofficial CWL specification).
    properties:
      class:
        type: string
        enum:
        - OGCAPIRequirement
      process:
        description: Process location.
        $ref: '#/$definitions/ReferenceURL'
    required:
    - process
    additionalProperties: false
  WPS1Requirement:
    type: object
    title: WPS1Requirement
    description: |
      Hint indicating that the Application Package corresponds to a
      WPS-1 provider process that should be remotely executed and monitored by this
      instance. (note: can only be an ''hint'' as it is unofficial CWL specification).
    properties:
      class:
        type: string
        enum:
          - WPS1Requirement
      process:
        type: string
        title: process
        description: Process identifier of the remote WPS provider.
        pattern: '^[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*$'
      provider:
        description: WPS provider endpoint.
        $ref: '#/$definitions/ReferenceURL'
    required:
    - process
    - provider
    additionalProperties: false
  CWLHintsList:
    type: array
    title: CWLHintsList
    items:
      allOf:
        - $comment: |
            When using the list representation, 'class' is required to indicate which one is being represented.
            When using the mapping representation, 'class' is optional since it's the key, but it must match by name.
          type: object
          required:
            - class
        - $ref: '#/$definitions/CWLHintsItem'
  CWLHintsItem:
    title: CWLHintsItem
    $comment: |
      For any new items added, ensure they are added under 'class' of 'UnknownRequirement' as well.
      Otherwise, insufficiently restrictive classes could cause multiple matches, failing the 'oneOf' condition.
    oneOf:
    - $ref: '#/$definitions/cwltool:CUDARequirement'
    - $ref: '#/$definitions/DockerRequirement'
    - $ref: '#/$definitions/InitialWorkDirRequirement'
    - $ref: '#/$definitions/InlineJavascriptRequirement'
    - $ref: '#/$definitions/InplaceUpdateRequirement'
    - $ref: '#/$definitions/LoadListingRequirement'
    - $ref: '#/$definitions/NetworkAccessRequirement'
    - $ref: '#/$definitions/ResourceRequirement'
    - $ref: '#/$definitions/ScatterFeatureRequirement'
    - $ref: '#/$definitions/ToolTimeLimitRequirement'
    - $ref: '#/$definitions/WorkReuseRequirement'
    - $ref: '#/$definitions/BuiltinRequirement'
    - $ref: '#/$definitions/OGCAPIRequirement'
    - $ref: '#/$definitions/WPS1Requirement'
    - $ref: '#/$definitions/UnknownRequirement'
  CWLCommand:
    oneOf:
    - type: string
      title: String command.
    - $ref: '#/$definitions/CommandParts'
    title: CWLCommand
    description: |
      Command called in the docker image or on shell according to requirements
      and hints specifications. Can be omitted if already defined in the docker
      image.
  CommandParts:
    type: array
    title: Command Parts
    items:
      type: string
      title: cmd
  CWLArgumentObject:
    type: object
    properties:
      prefix:
        type: string
      position:
        type: integer
      valueFrom:
        type: string
    additionalProperties: false
  CWLArguments:
    type: array
    title: CWLArguments
    description: Base arguments passed to the command.
    items:
      oneOf:
      - type: string
      - $ref: '#/$definitions/CWLArgumentObject'
  CWLInputStdInDefinition:
    description: |
      Indicates that the value passed to this CWL input will be redirected to the standard input stream of the command.
      Can be defined for only one input and must not be combined with 'stdin' at the root of the CWL document.
    type: string
    enum:
      - stdin
  CWLInputStdInObjectType:
    type: object
    properties:
      type:
        $ref: '#/$definitions/CWLInputStdInDefinition'
    required:
      - type
  CWLInputStdIn:
    oneOf:
      - $ref: '#/$definitions/CWLInputStdInDefinition'
      - $ref: '#/$definitions/CWLInputStdInObjectType'
  CWLOutputStdOutDefinition:
    description: |
      Indicates that the data pushed to the standard output stream by the command will be redirected to this CWL output.
      Can be defined for only one output and must not be combined with 'stdout' at the root of the CWL document.
    type: string
    enum:
      - stdout
  CWLOutputStdOutObjectType:
    type: object
    properties:
      type:
        $ref: '#/$definitions/CWLOutputStdOutDefinition'
    required:
      - type
  CWLOutputStdOut:
    oneOf:
      - $ref: '#/$definitions/CWLOutputStdOutDefinition'
      - $ref: '#/$definitions/CWLOutputStdOutObjectType'
  CWLOutputStdErrDefinition:
    description: |
      Indicates that the data pushed to the standard error stream by the command will be redirected to this CWL output.
      Can be defined for only one output and must not be combined with 'stderr' at the root of the CWL document.
    type: string
    enum:
      - stderr
  CWLOutputStdErrObjectType:
    type: object
    properties:
      type:
        $ref: '#/$definitions/CWLOutputStdErrDefinition'
    required:
      - type
  CWLOutputStdErr:
    oneOf:
      - $ref: '#/$definitions/CWLOutputStdErrDefinition'
      - $ref: '#/$definitions/CWLOutputStdErrObjectType'
  CWLInputsDefinition:
    oneOf:
    - $ref: '#/$definitions/CWLInputList'
    - $ref: '#/$definitions/CWLInputMap'
    title: CWLInputsDefinition
    description: All inputs available to the Application Package.
  CWLInputList:
    type: array
    title: CWLInputList
    description: Package inputs defined as items.
    items:
      $ref: '#/$definitions/CWLInputItem'
  CWLType:
    oneOf:
    - $ref: '#/$definitions/CWLTypeBase'
    - $ref: '#/$definitions/CWLTypeList'
    title: CWL Type
  CWLTypeDefinition:
    type: string
    title: CWL type string definition
    summary: CWL type string definition.
    description: Field type definition.
    enum:
      - 'null'
      - Any
      - Any[]
      - Directory
      - Directory?
      - Directory[]
      - Directory[]?
      - File
      - File?
      - File[]
      - File[]?
      - boolean
      - boolean?
      - boolean[]
      - boolean[]?
      - double
      - double?
      - double[]
      - double[]?
      - enum?
      - enum[]
      - enum[]?
      - float
      - float?
      - float[]
      - float[]?
      - int
      - int?
      - int[]
      - int[]?
      - integer
      - integer?
      - integer[]
      - integer[]?
      - long
      - long?
      - long[]
      - long[]?
      - string
      - string?
      - string[]
      - string[]?
  CWLTypeBase:
    oneOf:
    - $ref: '#/$definitions/CWLTypeDefinition'
    - $ref: '#/$definitions/CWLTypeArray'
    - $ref: '#/$definitions/CWLTypeEnum'
    title: CWLTypeBase
  CWLTypeArray:
    type: object
    title: CWLTypeArray
    summary: CWL type as list of items.
    properties:
      type:
        type: string
        title: type
        example: array
        enum:
        - array
      items:
        type: string
        title: CWLTypeArrayItems
        description: Field type definition.
        enum:
        - Directory
        - File
        - boolean
        - double
        - enum
        - float
        - int
        - integer
        - long
        - string
    required:
    - type
    - items
    additionalProperties: {}
  CWLTypeSymbols:
    type: array
    title: CWLTypeSymbols
    summary: Allowed values composing the enum.
    items:
      $ref: '#/$definitions/CWLTypeSymbolValues'
  CWLTypeSymbolValues:
    oneOf:
    - type: number
    - type: integer
    - type: string
    title: CWLTypeSymbolValues
  CWLTypeEnum:
    type: object
    title: CWLTypeEnum
    summary: CWL type as enum of values.
    properties:
      type:
        type: string
        title: type
        example: enum
        enum:
        - enum
      symbols:
        $ref: '#/$definitions/CWLTypeSymbols'
    required:
    - type
    - symbols
    additionalProperties: {}
  CWLTypeList:
    type: array
    title: CWLTypeList
    summary: Combination of allowed CWL types.
    items:
      $ref: '#/$definitions/CWLTypeBase'
  CWLDefault:
    oneOf:
    - $ref: '#/$definitions/AnyLiteralType'
    - $ref: '#/$definitions/AnyLiteralList'
    - $ref: '#/$definitions/CWLDefaultLocation'
    title: CWLDefault
    description: Default value of input if not provided for task execution.
  AnyLiteralType:
    oneOf:
      - type: number
      - type: boolean
      - type: string
  AnyLiteralList:
    type: array
    title: AnyLiteralList
    items:
      $ref: '#/$definitions/AnyLiteralType'
  ReferenceURL:
    type: string
    format: url
    pattern: '^((?:http|ftp)s?://)?(?!.*//.*$)(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|localhost|\[[a-f0-9:]+\]|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::\d+)?(?:/?|[/?]\S+)$'
  CWLDefaultLocation:
    type: object
    properties:
      class:
        type: string
        enum:
          - File
          - Directory
      location:
        type: string
    required:
      - class
      - location
    additionalProperties: false
  InputBinding:
    type: object
    title: Input Binding
    description: Defines how to specify the input for the command.
    properties:
      prefix:
        type: string
      position:
        type: integer
      valueFrom:
        type: string
      itemSeparator:
        type: string
    additionalProperties: false
  CWLInputItem:
    type: object
    title: Input
    description: Input specification. Note that multiple formats are supported and
      not all specification variants or parameters are presented here. Please refer
      to official CWL documentation for more details (https://www.commonwl.org).
    properties:
      type:
        oneOf:
        - $ref: '#/$definitions/CWLType'
        - $ref: '#/$definitions/CWLInputStdIn'
      default:
        $ref: '#/$definitions/CWLDefault'
      inputBinding:
        $ref: '#/$definitions/InputBinding'
      id:
        description: Identifier of the CWL input.
        $ref: '#/$definitions/CWLIdentifier'
    required:
    - type
    - id
    additionalProperties: {}
  CWLInputObject:
    type: object
    title: CWLInputObject
    summary: CWL type definition with parameters.
    properties:
      type:
        $ref: '#/$definitions/CWLType'
      default:
        $ref: '#/$definitions/CWLDefault'
      inputBinding:
        $ref: '#/$definitions/InputBinding'
        additionalProperties: {}
    required:
      - type
    additionalProperties: {}
  CWLInputMap:
    type: object
    title: CWLInputMap
    description: Package inputs defined as mapping.
    properties: {}
    required: []
    additionalProperties:
      oneOf:
      - $ref: '#/$definitions/CWLTypeDefinition'
      - type: array
        title: CWLTypeStringList
        summary: List of allowed CWL type strings.
        description: List of allowed direct CWL type specifications as strings.
        items:
          $ref: '#/$definitions/CWLType'
      - $ref: "#/$definitions/CWLInputObject"
      - $ref: '#/$definitions/CWLInputStdIn'
  CWLOutputsDefinition:
    oneOf:
    - $ref: '#/$definitions/CWLOutputList'
    - $ref: '#/$definitions/CWLOutputMap'
    title: CWLOutputsDefinition
    description: All outputs produced by the Application Package.
  CWLOutputList:
    type: array
    title: CWLOutputList
    description: Package outputs defined as items.
    items:
      $ref: '#/$definitions/CWLOutputItem'
  OutputBinding:
    type: object
    title: OutputBinding
    description: Defines how to retrieve the output result from the command.
    properties:
      glob:
        type: string
        title: glob
        description: Glob pattern to find the output on disk or mounted docker volume.
    additionalProperties: {}
  CWLOutputItem:
    type: object
    title: CWLOutputItem
    description: Output specification. Note that multiple formats are supported
      and not all specification variants or parameters are presented here. Please
      refer to official CWL documentation for more details (https://www.commonwl.org).
    properties:
      type:
        oneOf:
        - $ref: '#/$definitions/CWLType'
        - $ref: '#/$definitions/CWLOutputStdOut'
        - $ref: '#/$definitions/CWLOutputStdErr'
      outputBinding:
        $ref: '#/$definitions/OutputBinding'
      id:
        description: Identifier of the CWL output.
        $ref: '#/$definitions/CWLIdentifier'
    required:
    - type
    - id
    additionalProperties: {}
  CWLOutputObject:
    type: object
    title: CWLOutputObject
    summary: CWL type definition with parameters.
    properties:
      type:
        $ref: '#/$definitions/CWLType'
      outputBinding:
        $ref: '#/$definitions/OutputBinding'
    required:
    - type
    additionalProperties: {}
  CWLOutputMap:
    type: object
    title: CWLOutputMap
    description: Package outputs defined as mapping.
    properties: {}
    required: []
    additionalProperties:
      oneOf:
      - $ref: '#/$definitions/CWLTypeDefinition'
      - type: array
        title: CWLTypeStringList
        summary: List of allowed CWL type strings.
        description: List of allowed direct CWL type specifications as strings.
        items:
          $ref: '#/$definitions/CWLType'
      - $ref: "#/$definitions/CWLOutputObject"
      - $ref: '#/$definitions/CWLOutputStdOut'
      - $ref: '#/$definitions/CWLOutputStdErr'
  CWLScatter:
    oneOf:
    - $ref: '#/$definitions/CWLIdentifier'
    - $ref: '#/$definitions/CWLScatterMulti'
    title: CWLScatter
    description: One or more input identifier of an application step within a Workflow
      were an array-based input to that Workflow should be scattered across multiple
      instances of the step application.
  CWLScatterMulti:
    type: array
    title: CWLScatterMulti
    items:
      $ref: '#/$definitions/CWLIdentifier'
  CWLScatterMethod:
    type: string
    title: scatterMethod
    description: Describes how to decompose the scattered input into a discrete
      set of jobs. When 'dotproduct', specifies that each of the input arrays
      are aligned and one element taken from each array to construct each job.
      It is an error if all input arrays are of different length. When 'nested_crossproduct',
      specifies the Cartesian product of the inputs, producing a job for every
      combination of the scattered inputs. The output must be nested arrays
      for each level of scattering, in the order that the input arrays are listed
      in the scatter field. When 'flat_crossproduct', specifies the Cartesian
      product of the inputs, producing a job for every combination of the scattered
      inputs. The output arrays must be flattened to a single level, but otherwise
      listed in the order that the input arrays are listed in the scatter field.
    enum:
      - dotproduct
      - nested_crossproduct
      - flat_crossproduct
  CWLWorkflowStepScatter:
    type: object
    properties:
      scatter:
        $ref: '#/$definitions/Scatter'
      scatterMethod:
        $ref: '#/$definitions/ScatterMethod'
  CWLWorkflowStepRun:
    description: Nested CWL definition to run as Workflow step.
    $comment: SubWorkflowRequirement not supported yet, but technically possible.
    oneOf:
      - description: File or URL reference to a CWL tool definition.
        type: string
      - description: Nested CWL tool definition for the step.
        $ref: '#/$definitions/CWLAtomicNested'
  CWLWorkflowStepWhen:
    description: Condition to execute a step that must evaluate to a boolean-like value.
    $ref: '#/$definitions/CWLExpression'
  LinkMergeMethod:
    type: string
    enum:
      - merge_nested
      - merge_flattened
  CWLWorkflowStepInput:
    type: object
    properties:
      source:
        oneOf:
          - type: string
          - type: array
            items: string
      linkMerge:
        $ref: '#/$definitions/LinkMergeMethod'
      default:
        $ref: '#/$definitions/CWLDefault'
      valueFrom:
        $ref: '#/$definitions/CWLExpression'
  CWLWorkflowStepInItem:
    allOf:
      - $ref: '#/$definitions/CWLIdentifier'
      - $ref: '#/$definitions/CWLWorkflowStepInput'
      - required:
        - id
  CWLWorkflowStepInList:
    type: array
    items:
      $ref: '#/$definitions/CWLWorkflowStepInItem'
  CWLWorkflowStepInMap:
    additionalProperties:
      oneOf:
        - type: string
        - type: array
          item: string
        - $ref: '#/$definitions/CWLWorkflowStepInput'
  CWLWorkflowStepIn:
    description: Mapping of Workflow step inputs to nested CWL tool definitions inputs or outputs.
    oneOf:
      - $ref: '#/$definitions/CWLWorkflowStepInMap'
      - $ref: '#/$definitions/CWLWorkflowStepInList'
  CWLWorkflowStepOut:
    description: Mapping of Workflow step inputs to nested CWL tool definitions inputs or outputs.
    type: array
    items:
      oneOf:
        - $ref: '#/$definitions/CWLIdentifier'
        - type: object
          properties:
            id:
              $ref: '#/$definitions/CWLIdentifier'
          required:
            - id
  CWLWorkflowStepDefinition:
    type: object
    properties:
      in:
        $ref: '#/$definitions/CWLWorkflowStepIn'
      run:
        $ref: '#/$definitions/CWLWorkflowStepRun'
      when:
        $ref: '#/$definitions/CWLWorkflowStepWhen'
      out:
        $ref: '#/$definitions/CWLWorkflowStepOut'
    required:
      - in
      - run
      - out
  CWLWorkflowStepObject:
    allOf:
    - $ref: '#/$definitions/CWLWorkflowStepDefinition'
    - $ref: '#/$definitions/CWLWorkflowStepScatter'
  CWLWorkflowStepItem:
    allOf:
      - $ref: '#/$definitions/CWLWorkflowStepId'
      - $ref: '#/$definitions/CWLWorkflowStepObject'
  CWLWorkflowStepId:
    type: object
    properties:
      id:
        $ref: '#/$definitions/CWLIdentifier'
    required:
      - id
  CWLWorkflowStepMap:
    type: object
    additionalProperties:
      $ref: '#/$definitions/CWLWorkflowStepObject'
  CWLWorkflowStepList:
    type: array
    items:
      $ref: '#/$definitions/CWLWorkflowStepItem'
  CWLWorkflowClass:
    type: object
    properties:
      class:
        type: string
        enum:
          - Workflow
  CWLWorkflowSteps:
    oneOf:
      - $ref: '#/$definitions/CWLWorkflowStepMap'
      - $ref: '#/$definitions/CWLWorkflowStepList'
  CWLWorkflowBase:
    type: object
    properties:
      steps:
        $ref: '#/$definitions/CWLWorkflowSteps'
      inputs:
        $ref: '#/$definitions/CWLInputsDefinition'
      outputs:
        $ref: '#/$definitions/CWLOutputsDefinition'
      requirements:
        $comment: Technically a different subset, but lots of redefinitions to be done.
        $ref: '#/$definitions/CWLRequirements'
      hints:
        $comment: Technically a different subset, but lots of redefinitions to be done.
        $ref: '#/$definitions/CWLHints'
  CWLWorkflow:
    allOf:
      - $ref: '#/$definitions/CWLVersion'
      - $ref: '#/$definitions/CWLWorkflowClass'
      - $ref: '#/$definitions/CWLWorkflowBase'
  CWLVersion:
    type: object
    properties:
      clwVersion:
        type: string
        title: cwlVersion
        description: CWL version of the described application package.
        pattern: '^v\d+(\.\d+(\.\d+)*)*$'
    required:
      - cwlVersion
  CWLAtomic:
    allOf:
      - $ref: '#/$definitions/CWLVersion'
      - $ref: '#/$definitions/CWLMetadata'
      - $ref: '#/$definitions/CWLAtomicBase'
  CWLAtomicNested:
    $comment: Same as 'CWLAtomic', but 'cwlVersion' not repeated (only at root).
    allOf:
    - $ref: '#/$definitions/CWLMetadata'
    - $ref: '#/$definitions/CWLAtomicBase'
  CWLAtomicBase:
    type: object
    title: CWL atomic definition
    description: Direct CWL definition instead of the graph representation.
    properties:
      id:
        $ref: '#/$definitions/CWLIdentifier'
      class:
        type: string
        title: Class
        description: CWL class specification. This is used to differentiate between
          single Application Package (AP)definitions and Workflow that chains multiple
          packages.
        enum:
        - CommandLineTool
        - ExpressionTool
      intent:
        $ref: '#/$definitions/CWLIntent'
      requirements:
        $ref: '#/$definitions/CWLRequirements'
      hints:
        $ref: '#/$definitions/CWLHints'
      baseCommand:
        $ref: '#/$definitions/CWLCommand'
      arguments:
        $ref: '#/$definitions/CWLArguments'
      inputs:
        $ref: '#/$definitions/CWLInputsDefinition'
      outputs:
        $ref: '#/$definitions/CWLOutputsDefinition'
      stdin:
        description: |
          Source of the input stream. 
          Typically, an expression referring to an existing file name or an input of the CWL document.
        $ref: '#/$definitions/CWLExpression'
      stdout:
        description: |
          Destination of the output stream.
          Typically, an expression referring to a desired file name or provided by a CWL input reference.
        $ref: '#/$definitions/CWLExpression'
      stderr:
        description: |
          Destination of the error stream.
          Typically, an expression referring to a desired file name or provided by a CWL input reference.
        $ref: '#/$definitions/CWLExpression'
      scatter:
        $ref: '#/$definitions/CWLScatter'
      scatterMethod:
        $ref: '#/$definitions/CWLScatterMethod'
    required:
    - class
    - inputs
    - outputs
    additionalProperties: {}
  CWLGraphList:
    type: array
    title: CWLGraphList
    description: Graph definition that defines *exactly one* CWL application package
      represented as list. Multiple definitions simultaneously deployed is NOT supported
      currently.
    items:
      $ref: '#/$definitions/CWLGraphItem'
    maxItems: 1
    minItems: 1
  CWLGraphItem:
    type: object
    title: CWLGraphItem
    properties:
      class:
        type: string
        title: Class
        description: CWL class specification. This is used to differentiate between
          single Application Package (AP)definitions and Workflow that chains multiple
          packages.
        enum:
        - CommandLineTool
        - ExpressionTool
        - Workflow
      id:
        $ref: '#/$definitions/CWLIdentifier'
      intent:
        $ref: '#/$definitions/CWLIntent'
      requirements:
        $ref: '#/$definitions/CWLRequirements'
      hints:
        $ref: '#/$definitions/CWLHints'
      baseCommand:
        $ref: '#/$definitions/CWLCommand'
      arguments:
        $ref: '#/$definitions/CWLArguments'
      inputs:
        $ref: '#/$definitions/CWLInputsDefinition'
      outputs:
        $ref: '#/$definitions/CWLOutputsDefinition'
      scatter:
        $ref: '#/$definitions/CWLScatter'
      scatterMethod:
        $ref: '#/$definitions/CWLScatterMethod'
    required:
    - class
    - id
    - inputs
    - outputs
    additionalProperties: {}
  CWLGraphBase:
    type: object
    properties:
      $graph:
        $ref: '#/$definitions/CWLGraphList'
    required:
    - $graph
    additionalProperties: {}
  CWLGraph:
    title: CWLGraph
    allOf:
      - $ref: '#/$definitions/CWLVersion'
      - $ref: '#/$definitions/CWLMetadata'
      - $ref: '#/$definitions/CWLGraphBase'
  CWLMetadata:
    type: object
    properties:
      version:
        type: string
        title: version
        description: "Version of the process."
        example: "1.2.3"
        pattern: '^\d+(\.\d+(\.\d+(\.[a-zA-Z0-9\-_]+)*)*)*$'
